# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SF_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#! /usr/bin/python3
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse

import numpy as np
import tensorflow as tf
import pandas as pd

# for firebase/database
import pyrebase

# for barcode
import pyzbar.pyzbar as pyzbar
import cv2

# for reading files in dir
import os
from datetime import datetime
import time
import sys

# Raspi lib
import RPi.GPIO as GPIO
from picamera.array import PiRGBArray
from picamera import PiCamera

EMULATE_HX711=False

referenceUnit = -22.5

wait_time = 1

if not EMULATE_HX711:
    from hx711 import HX711
else:
    from emulated_hx711 import HX711
    
#Button Pins
addButton = 19 # Pin 35
subButton = 16 # Pin 36
    
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(addButton,GPIO.IN)
GPIO.setup(subButton,GPIO.IN)

#Servo setup
GPIO.setup(17,GPIO.OUT)
servo1 = GPIO.PWM(17,50) #Pin 11 for servo1 and freq = 50 Hz
GPIO.setup(18,GPIO.OUT)
servo2 = GPIO.PWM(18,50) #Pin 12 for servo1 and freq = 50 Hz

down = False
item = []
weight = []

def cleanAndExit():
    print("Cleaning...")

    if not EMULATE_HX711:
        GPIO.cleanup()
        
    print("Bye!")
    sys.exit()

def weight_init():
    
    global hx
    hx = HX711(5, 6) # Pin 29 and 31
    hx.set_reading_format("MSB","MSB")
    hx.set_reference_unit(referenceUnit)
    hx.reset()
    hx.tare()

    print("Tare done! Add weight now...")

def load_graph(model_file):
    graph = tf.Graph()
    graph_def = tf.compat.v1.GraphDef()

    with open(model_file, "rb") as f:
        graph_def.ParseFromString(f.read())
    with graph.as_default():
        tf.import_graph_def(graph_def)

    return graph


def read_tensor_from_image_file(file_name,
                                input_height=224,
                                input_width=224,
                                input_mean=0,
                                input_std=255):
    input_name = "file_reader" #MOBILE = 224 INCEPTION 299
    output_name = "normalized"
    file_reader = tf.io.read_file(file_name, input_name)
    if file_name.endswith(".png"):
        image_reader = tf.image.decode_png(
            file_reader, channels=3, name="png_reader")
    elif file_name.endswith(".gif"):
        image_reader = tf.squeeze(
            tf.image.decode_gif(file_reader, name="gif_reader"))
    elif file_name.endswith(".bmp"):
        image_reader = tf.image.decode_bmp(file_reader, name="bmp_reader")
    else:
        image_reader = tf.image.decode_jpeg(
            file_reader, channels=3, name="jpeg_reader")
    float_caster = tf.cast(image_reader, tf.float32)
    dims_expander = tf.expand_dims(float_caster, 0)
    resized = tf.compat.v1.image.resize_bilinear(
        dims_expander, [input_height, input_width])
    normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std])
    sess = tf.compat.v1.Session()
    result = sess.run(normalized)

    return result


def load_labels(label_file):
    label = []
    proto_as_ascii_lines = tf.io.gfile.GFile(label_file).readlines()
    for l in proto_as_ascii_lines:
        label.append(l.rstrip())
    return label


def decode(im):
    # Find barcodes and QR codes
    decodedObjects = pyzbar.decode(im)

    '''
    # Print results
    for obj in decodedObjects:
        print('Type : ', obj.type)
        print('Data : ', obj.data, '\n')
    '''

    return decodedObjects

def arm_up():
    #servo1.start(0)
    #servo2.start(0)

    servo1.ChangeDutyCycle(7.5)
    time.sleep(1.5)
    servo1.ChangeDutyCycle(7.5)
    time.sleep(0.5)
    servo1.ChangeDutyCycle(0)
    servo2.ChangeDutyCycle(7.8)
    time.sleep(1.5)
    servo2.ChangeDutyCycle(7.8)
    time.sleep(0.5)
    servo2.ChangeDutyCycle(0)

    print("Armed up !!")

def arm_down():
    #servo1.start(0)
    #servo2.start(0)

    servo2.ChangeDutyCycle(4.4)
    time.sleep(1)
    servo2.ChangeDutyCycle(4.4)
    time.sleep(0.5)
    servo2.ChangeDutyCycle(0)
    servo1.ChangeDutyCycle(7.0)
    time.sleep(1)
    servo1.ChangeDutyCycle(6.5)
    time.sleep(1)
    servo1.ChangeDutyCycle(6.0)
    time.sleep(1)
    servo1.ChangeDutyCycle(5.5)
    time.sleep(1)
    servo1.ChangeDutyCycle(5.0)
    time.sleep(1)
    servo1.ChangeDutyCycle(4.8)
    time.sleep(1)
    servo1.ChangeDutyCycle(4.7)
    time.sleep(0.5)
    servo1.ChangeDutyCycle(0)
    time.sleep(0.5)
    #servo1.stop()
    
    down = True
    print("Arm down !!")

# Display barcode and QR code location
def display(im, decodedObjects):

    # Loop over all decoded objects
    for decodedObject in decodedObjects:
        points = decodedObject.polygon

        # If the points do not form a quad, find convex hull
        if len(points) > 4:
            hull = cv2.convexHull(
                np.array([point for point in points], dtype=np.float32))
            hull = list(map(tuple, np.squeeze(hull)))
        else:
            hull = points

        # Number of points in the convex hull
        n = len(hull)

        # Draw the convext hull
        for j in range(0, n):
            cv2.line(im, hull[j], hull[(j+1) % n], (255, 0, 0), 3)

    # Display results
    cv2.imshow("Results", im)


def Check_for_barcode(file_name):
    # Read image
    im = cv2.imread(file_name)
    decodedObjects = decode(im)

    for obj in decodedObjects:

        if(len(obj.data) > 0):
            return True
            break

def giveItemTable(imageFolder):
    
    const = 0
    
    for files in os.listdir(folder_path + imageFolder):
        file_name = os.path.join(folder_path + imageFolder, files)
        print(file_name)

        if(Check_for_barcode(file_name)):
            # Read image
            im = cv2.imread(file_name)
            decodedObjects = decode(im)

            for obj in decodedObjects:
                # variable for database
                thing = obj.data
                print(thing)
                item.append(thing)
        
        else: 
            graph = load_graph(model_file)
            t = read_tensor_from_image_file(
                file_name,
                input_height=input_height,
                input_width=input_width,
                input_mean=input_mean,
                input_std=input_std)

            input_name = "import/" + input_layer
            output_name = "import/" + output_layer
            input_operation = graph.get_operation_by_name(input_name)
            output_operation = graph.get_operation_by_name(output_name)

            with tf.compat.v1.Session(graph=graph) as sess:
                results = sess.run(output_operation.outputs[0], {
                    input_operation.outputs[0]: t
                })
            results = np.squeeze(results)

            top_k = results.argsort()[-5:][::-1]
            labels = load_labels(label_file)

            #variable for database
            thing = labels[top_k[0]] #input item name as string
            print(thing)
            item.append(thing)
        
        for (i, j) in zip(weight, item):
            dt_string = now.strftime("%d/%m/%Y - %H:%M:%S")
            firebaseConfig = { 'apiKey': "AIzaSyA2NIKjW9kD31eeRnFDZhpW02q443AoIBA",
            'authDomain': "smart-fridge-94bff.firebaseapp.com",
            'databaseURL': "https://smart-fridge-94bff-default-rtdb.firebaseio.com",
            'projectId': "smart-fridge-94bff",
            'storageBucket': "smart-fridge-94bff.appspot.com",
            'messagingSenderId': "625536633101",
            'appId': "1:625536633101:web:d4951c5cc692fac0364844"
            }

            firebase = pyrebase.initialize_app(firebaseConfig)
            db = firebase.database()
           
            # Testing Start

            things = db.child("items").get()
            for fruits in things.each():
                val = things.val()
                #print(val)
                for n in val.values():
                    for k,v in val.items():
                        #print(v['Item']) 
                        if (v['Item']) == j :
                            present = True
                            #print(present)
                            break
                        else :
                            present = False
                            #print(present)
                    break
                break

            if present :
                things = db.child("items").order_by_child("Item").equal_to(j).get()
                for fruits in things.each():
                    #print("1")
                    val = []
                    val = things.val()
                    #print(val)
                    for m in val.values():
                        for k,v in val.items():
                            #print (v['Item'])
                            if v['Item'] == j :
                                cWeight = v['Weight']
                    iWeight = int(cWeight) + i
                    uWeight = str(iWeight)
                    print(uWeight)
                    db.child("items").child(fruits.key()).update({'Weight' : uWeight,'TimeStamp':dt_string})
                    print("Updated Successfully in Firebase")
            else :
                wg = str(i)
                data = {
                'Item': j,
                'TimeStamp': dt_string,
                'Weight': wg
                }
                db.child("items").push(data)
                print("Added Successfully in Firebase")

            # Testing End

            if GPIO.input(addButton):
                things = db.child("items").get()
                for fruits in things.each():
                    val = things.val()
                    for k,v in val.items():
                        if (v['Item']) == j :
                            present = True
                            break
                        else :
                            present = False
                    break  

                if present :
                    things = db.child("items").order_by_child("Item").equal_to(j).get()
                    for fruits in things.each():
                        #print("1")
                        val = []
                        val = things.val()
                        #print(val)
                        for k,v in val.items():
                            #print (v['Item'])
                            if v['Item'] == j :
                                cWeight = v['Weight']
                        iWeight = int(cWeight) + int(i)
                        uWeight = str(iWeight)
                        print(uWeight)
                        db.child("items").child(fruits.key()).update({'Weight' : uWeight,'TimeStamp':dt_string})
                        print("Updated Successfully in Firebase")
                else :
                    wg = str(i)
                    data = {
                    'Item': j,
                    'TimeStamp': dt_string,
                    'Weight': wg
                    }
                    db.child("items").push(data)
                    print("Added Successfully in Firebase")


            if GPIO.input(subButton):
                things = db.child("items").get()
                for fruits in things.each():
                    val = things.val()
                    for k,v in val.items():
                        if (v['Item']) == j:
                            present = True
                            print(present)
                            break
                        else :
                            present = False
                            print(present)
                    break  

                if present :
                    things = db.child("items").order_by_child("Item").equal_to(j).get()
                    for fruits in things.each():
                        #print("1")
                        val = []
                        val = things.val()
                        #print(val)
                        for k,v in val.items():
                            #print (v['Item'])
                            if v['Item'] == j :
                                cWeight = v['Weight']
                        iWeight = int(cWeight) - int(i)
                        uWeight = str(iWeight)
                        print(uWeight)
                        db.child("items").child(fruits.key()).update({'Weight' : uWeight,'TimeStamp':dt_string})
                        print("Updated Successfully in Firebase")

                else :
                    wg = str(i)
                    data = {
                    'Item': j,
                    'TimeStamp': dt_string,
                    'Weight': wg
                    }
                    db.child("items").push(data)
                    print("Added Successfully in Firebase")
                
            del item[const]
            del weight[const]

def delete_processed_images(imageFolder):
    for files in os.listdir(folder_path + imageFolder):
        file_name = os.path.join(folder_path + imageFolder, files)
        print(file_name)
        
        if os.path.exists(file_name):
            os.remove(file_name)
            print(file_name + " is deleted.")
        else:
            print(file_name + " is already deleted.")


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QTime

# for firebase/database
import pyrebase


#*****************************************
class Stream(QtCore.QObject):
    newText = QtCore.pyqtSignal(str)

    def write(self, text):
        self.newText.emit(str(text))
#*****************************************


class Ui_SmartFridge(object):
    def setupUi(self, SmartFridge):
        SmartFridge.setObjectName("SmartFridge")
        SmartFridge.resize(996, 693)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        SmartFridge.setFont(font)
        self.centralwidget = QtWidgets.QWidget(SmartFridge)
        self.centralwidget.setMinimumSize(QtCore.QSize(996, 693))
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 178, 102, 255), stop:0.55 rgba(235, 148, 61, 255), stop:0.98 rgba(0, 0, 0, 255), stop:1 rgba(0, 0, 0, 0));\n"
"gridline-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgba(0, 0, 0, 255), stop:0.05 rgba(14, 8, 73, 255), stop:0.36 rgba(28, 17, 145, 255), stop:0.6 rgba(126, 14, 81, 255), stop:0.75 rgba(234, 11, 11, 255), stop:0.79 rgba(244, 70, 5, 255), stop:0.86 rgba(255, 136, 0, 255), stop:0.935 rgba(239, 236, 55, 255));")
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setObjectName("gridLayout")
        
        #Title
        self.title = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.title.setFont(font)
        self.title.setStyleSheet("background-color: rgb(255, 211, 47);\n"
"border-radius: 10px;")
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setObjectName("title")
        self.gridLayout.addWidget(self.title, 1, 0, 1, 1)
        
        #Calender
        self.calendarWidget = QtWidgets.QCalendarWidget(self.frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        self.calendarWidget.setFont(font)
        self.calendarWidget.setStyleSheet("background-color: rgb(254, 177, 31);\n"
"alternate-background-color: rgba(50, 51, 51, 66);\n"
"color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgba(0, 0, 0, 255), stop:0.05 rgba(14, 8, 73, 255), stop:0.36 rgba(28, 17, 145, 255), stop:0.6 rgba(126, 14, 81, 255), stop:0.75 rgba(234, 11, 11, 255), stop:0.79 rgba(244, 70, 5, 255), stop:0.86 rgba(255, 136, 0, 255), stop:0.935 rgba(239, 236, 55, 255));\n"
"selection-color: rgba(18, 0, 255, 255);\n"
"selection-background-color: rgb(152, 131, 255);\n"
"border:none;\n"
"border-radius: 15px;")
        self.calendarWidget.setObjectName("calendarWidget")
        self.gridLayout.addWidget(self.calendarWidget, 8, 1, 1, 1)
        
        #Time
        self.Time = QtWidgets.QLabel(self.frame)

        timer = QTimer(SmartFridge)
        timer.timeout.connect(self.showTime)
        timer.start(1000)

        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.Time.setFont(font)
        self.Time.setStyleSheet("background-color: rgb(255, 211, 47);\n"
"border-radius: 10px;")
        self.Time.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.Time.setIndent(15)
        self.Time.setObjectName("Time")
        self.gridLayout.addWidget(self.Time, 1, 1, 1, 1)
        
        # Add Button
        self.AddItem = QtWidgets.QPushButton(self.frame)
        self.AddItem.clicked.connect(self.AddItemclicked)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(17)
        font.setItalic(True)
        self.AddItem.setFont(font)
        self.AddItem.setStyleSheet("\n"
"background-color: rgb(255, 211, 47);\n"
"border: none;\n"
"border-radius: 10px\n"
"\n"
"")
        self.AddItem.setIconSize(QtCore.QSize(12, 12))
        self.AddItem.setObjectName("AddItem")
        self.gridLayout.addWidget(self.AddItem, 13, 1, 1, 1)
        
        #Remove Item
        self.RemoveItem = QtWidgets.QPushButton(self.frame)
        self.RemoveItem.clicked.connect(self.RemoveItemclicked)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(17)
        font.setItalic(True)
        self.RemoveItem.setFont(font)
        self.RemoveItem.setStyleSheet("background-color: rgb(255, 211, 47);\n"
"border:none;\n"
"border-radius: 10px;\n"
"")
        self.RemoveItem.setObjectName("RemoveItem")
        self.gridLayout.addWidget(self.RemoveItem, 13, 0, 1, 1)
        
        #Mode
        self.Mode = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.Mode.setFont(font)
        self.Mode.setStyleSheet("background-color: rgb(255, 211, 47);\n"
"border-radius: 10px;")
        self.Mode.setAlignment(QtCore.Qt.AlignCenter)
        self.Mode.setObjectName("Mode")
        self.gridLayout.addWidget(self.Mode, 12, 0, 1, 2)
        
        #Table
        self.tableWidget = QtWidgets.QTableWidget(self.frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.tableWidget.setFont(font)
        self.tableWidget.setStyleSheet("background-color: rgb(255, 211, 47);\n"
"alternate-background-color: rgba(254, 165, 32, 102);\n"
"border: none;\n"
"border-radius: 10px;")
        self.tableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.tableWidget.setAutoScroll(True)
        self.tableWidget.setAutoScrollMargin(3)
        self.tableWidget.setDragDropOverwriteMode(False)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setColumnWidth(0,230)
        self.tableWidget.setColumnWidth(1,230)
        self.loaddata()
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(253, 133, 35))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setForeground(brush)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(253, 133, 35))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setForeground(brush)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.gridLayout.addWidget(self.tableWidget, 8, 0, 3, 1)
        
        #Status
        self.status = QtWidgets.QTextEdit(self.frame)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.status.setFont(font)
        self.status.setStyleSheet("background-color: rgb(255, 211, 47);\n"
"border: rgb(255,255,255);\n"
"border-radius: 10px;\n"
"")
        self.status.setObjectName("status")
        self.gridLayout.addWidget(self.status, 9, 1, 1, 1)
        self.horizontalLayout.addWidget(self.frame)
        SmartFridge.setCentralWidget(self.centralwidget)

        self.retranslateUi(SmartFridge)
        QtCore.QMetaObject.connectSlotsByName(SmartFridge)


        sys.stdout = Stream(newText=self.onUpdateText)

    def onUpdateText(self, text):
        cursor = self.status.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertText(text)
        self.status.setTextCursor(cursor)
        self.status.ensureCursorVisible()

    def __del__(self):
        sys.stdout = sys.__stdout__

    def closeEvent(self, event):
        """Shuts down application on close."""
        # Return standard output to defaults.
        sys.stdout = sys.__stdout__
        super().closeEvent(event)

    def showTime(self):
        currentTime = QTime.currentTime()
        displayText = currentTime.toString("hh : mm : ss")
        self.Time.setText(displayText)

    def AddItemclicked(self):
        self.Mode.setText("Add Item Mode")
        print("Add Item Mode")
        Add = True
        Remove = False
        if down == True:
            down = False
            servo1.start(0)
            servo2.start(0)
            arm_up()
            time.sleep(2)
        for i in range(1,10):
            val = int(hx.get_weight(5))
            print(val)
            if val > 50:
                print (val)
                weight.append(val)
                    
                time.sleep(5)
                print("Image Capture Started")

                camera.capture(rawCapture, format = "bgr")
                im = rawCapture.array
                now = datetime.now()
                img_name = folder_path + "captured_images/Add/"+ str(now) + "_{}.png".format(val)
                cv2.imwrite(img_name, im)
                rawCapture.truncate(0)

                print("Image capture completed")
                print("Please remove the item and place a new one")
                time.sleep(20) #30 seconds for user to remove fruit

                flag = 0
        print("Processing Images. Please wait..")
        arm_down()
        cap.release()
                

        #if GPIO.input(addButton):
        giveItemTable("captured_images/Add")
        time.sleep(5)
        #delete_processed_images("captured_images/Add")
        print("Processing Done!!")
        servo1.start(0)
        servo2.start(0)
        arm_up()
        down = False

    def RemoveItemclicked(self):
        self.Mode.setText("Remove Item Mode")
        print("Remove Item Mode")
        Add = False
        Remove = True
        if down == True:
            down = False
            servo1.start(0)
            servo2.start(0)
            arm_up()
            time.sleep(2)
        for i in range(1,10):
            val = int(hx.get_weight(5))
            print(val)
            if val > 50:
                print("Weight detected - Sub")
                time.sleep(5)
                print("Image Capture Started")

                camera.capture(rawCapture, format = "bgr")
                im = rawCapture.array
                now = datetime.now()
                img_name = folder_path + "captured_images/Sub/"+ str(now) + "_{}.png".format(val)
                cv2.imwrite(img_name, im)
                rawCapture.truncate(0)

                print("Image capture completed")
                print("Please remove the item and place a new one")
                time.sleep(30) #30 seconds for user to remove fruit

                flag = 0
        print("Processing Images. Please wait..")
        arm_down()
        cap.release()
                
        #if GPIO.input(addButton):
        giveItemTable("captured_images/Sub")
        time.sleep(5)
        #delete_processed_images("captured_images/Sub")
        print("Processing Done!!")
        servo1.start(0)
        servo2.start(0)
        arm_up()
        down = False

    def loaddata(self):
        data = []

        firebaseConfig = { 'apiKey': "AIzaSyA2NIKjW9kD31eeRnFDZhpW02q443AoIBA",
        'authDomain': "smart-fridge-94bff.firebaseapp.com",
        'databaseURL': "https://smart-fridge-94bff-default-rtdb.firebaseio.com",
        'projectId': "smart-fridge-94bff",
        'storageBucket': "smart-fridge-94bff.appspot.com",
        'messagingSenderId': "625536633101",
        'appId': "1:625536633101:web:d4951c5cc692fac0364844"
        }
        firebase = pyrebase.initialize_app(firebaseConfig)
        db = firebase.database()
        things = db.child("items").get()

        row = 0
        self.tableWidget.setRowCount(35)

        for things in things.each():
            val = things.val()
            self.tableWidget.setItem(row,0,QtWidgets.QTableWidgetItem(val['Item']))
            self.tableWidget.setItem(row,1,QtWidgets.QTableWidgetItem(val['Weight']))
            row = row+1
    
    def retranslateUi(self, SmartFridge):
        _translate = QtCore.QCoreApplication.translate
        SmartFridge.setWindowTitle(_translate("SmartFridge", "Smart Fridge"))
        self.title.setText(_translate("SmartFridge", "SMART FRIDGE"))
        #self.Time.setText(_translate("SmartFridge", "Time"))
        self.AddItem.setText(_translate("SmartFridge", "ADD \n"
"ITEM"))
        self.RemoveItem.setText(_translate("SmartFridge", "REMOVE \n"
"ITEM"))
        self.Mode.setText(_translate("SmartFridge", "Press any button to continue..."))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("SmartFridge", "Item Name"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("SmartFridge", "Weight (in grams)"))

    def print(self):
        print("Updating!!")
        print("Ready!")


if __name__ == "__main__":
    Add = True
    Remove = False

    print("Arming Up ! Please wait...")
    servo1.start(0)
    servo2.start(0)
    arm_up()
    time.sleep(2)
    weight_init()
    
    folder_path = "/home/pi/Smart_Fridge/"
    file_name = folder_path + "test-images/apple.jpeg"
    model_file = folder_path + "model/output_graph.pb"
    label_file = folder_path + "model/output_labels.txt"
    input_height = 224
    input_width = 224 #MOBILLENET 224 ; INCEPTION 299
    input_mean = 0
    input_std = 255
    input_layer = "Placeholder"
    output_layer = "final_result"

    flag = 0

    camera = PiCamera()
    camera.resolution = (640, 480)
    rawCapture = PiRGBArray(camera, size=(640, 480))
    # allow the camera to warmup
    time.sleep(0.2)
    
    cap = cv2.VideoCapture(0)
    now = datetime.now()

    import sys
    app = QtWidgets.QApplication(sys.argv)
    SmartFridge = QtWidgets.QMainWindow()

    ui = Ui_SmartFridge()
    ui.setupUi(SmartFridge)
    SmartFridge.show()
    sys.exit(app.exec_())
